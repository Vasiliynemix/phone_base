import shutil

from aiofiles import os
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile

from src.bot.handlers.funks import (
    get_list_random_text,
    get_file_text,
    check_file_text,
    create_file_text,
    create_text_links,
    split_text,
)
from src.bot.keyboards.start import start_mp
from src.bot.keyboards.user.inline.phone import create_phone_mp
from src.bot.keyboards.user.inline.phone_base import list_phone_base_mp
from src.bot.keyboards.user.inline.phone_list import (
    create_bookmarks_keyboard,
)
from src.bot.keyboards.user.reply.cancel import cancel_mp
from src.bot.keyboards.yes_no import yes_no_mp
from src.bot.structures.state.user import (
    AddPhoneBaseState,
    EditPhoneBaseState,
    GetLinksState,
)
from src.config.config import cfg
from src.db.db import Database

router = Router()


@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=start_mp)


@router.message(F.text == "üì±–ë–∞–∑—ã –Ω–æ–º–µ—Ä–æ–≤")
async def phone_base(message: Message):
    await message.answer("–ë–∞–∑—ã –Ω–æ–º–µ—Ä–æ–≤", reply_markup=list_phone_base_mp)


@router.callback_query(F.data == "phone_base_list_back")
@router.callback_query(F.data == "phone_cancel")
async def phone_base_list_back(callback: Message):
    await callback.answer()
    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –±–∞–∑", reply_markup=list_phone_base_mp)


@router.callback_query(F.data == "phone_base_add")
async def phone_base_add(callback: Message, state: FSMContext):
    await callback.answer()
    await state.set_state(AddPhoneBaseState.csv)
    await callback.message.answer(
        "–∑–∞–≥—Ä—É–∑–∏—Ç–µ csv —Ñ–∞–π–ª —Å –±–∞–∑–æ–π –Ω–æ–º–µ—Ä–æ–≤", reply_markup=cancel_mp
    )


@router.message(F.document, AddPhoneBaseState.csv)
@router.message(F.document, EditPhoneBaseState.file)
async def phone_base_csv(message: Message, state: FSMContext, db: Database, bot: Bot):
    if message.document.mime_type != "text/csv":
        await message.answer("–≠—Ç–æ –Ω–µ csv —Ñ–∞–π–ª", reply_markup=cancel_mp)
        return

    file_id = message.document.file_id

    file_text = await get_file_text(bot, file_id)
    ok = check_file_text(file_text)
    if not ok:
        await message.answer(
            (
                "CSV —Ñ–∞–π–ª –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
                "–í –Ω–µ–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ\n"
                "–ù–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö"
            ),
            reply_markup=cancel_mp,
        )
        return

    current_state = await state.get_state()
    if current_state == EditPhoneBaseState.file:
        data = await state.get_data()
        name = data.get("name")
        await db.phone.update_numbers(
            user_id=message.from_user.id, name=name, numbers=file_text
        )
        await state.clear()
        await message.answer("–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω", reply_markup=start_mp)
        return

    await state.update_data(file_id=file_id)
    await state.set_state(AddPhoneBaseState.name)

    phones = await db.phone.get_all(user_id=message.from_user.id)

    phones_text = ""
    if len(phones) > 0:
        phones_text += "\n–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–º–µ–Ω:\n"
        phones_text += "\n".join([phone.name for phone in phones])

    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º{phones_text}",
        reply_markup=cancel_mp,
    )


@router.message(AddPhoneBaseState.csv)
async def phone_base_csv_not_document(message: Message):
    await message.answer(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ csv —Ñ–æ—Ä–º–∞—Ç–µ —Å –±–∞–∑–æ–π –Ω–æ–º–µ—Ä–æ–≤", reply_markup=cancel_mp
    )


@router.message(F.text, AddPhoneBaseState.name)
async def phone_base_name(message: Message, state: FSMContext, db: Database):
    phone = await db.phone.get(user_id=message.from_user.id, name=message.text)
    if phone is not None:
        await message.answer(
            "–ë–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=cancel_mp
        )
        return

    if len(message.text) > 20:
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 20. –¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ {len(message.text)}", reply_markup=cancel_mp)
        return

    await state.update_data(name=message.text)
    await state.set_state(AddPhoneBaseState.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç. –§–æ—Ä–º–∞—Ç:\n{–î–æ–±—Ä—ã–π –¥–µ–Ω—å|–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ}!"
        " –í–∞–º –ø–∏—à–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è ¬´–°–∏—Å—Ç–µ–º—ã –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª\n\n"
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è {–ø—Ä–æ–¥–∞–∂–µ–π|—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π} –∏ {—É—Å—Ç–∞–Ω–æ–≤–∫–æ–π|–º–æ–Ω—Ç–∞–∂–æ–º}"
        " –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –∏ —á–∞—Å—Ç–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n\n"
        "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ª–∏ –≤–∞–º —É—Å–∏–ª–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –¥–æ–º–∞ –∏–ª–∏ –±–∏–∑–Ω–µ—Å–∞?\n\n"
        "–°–ª–æ–≤–∞ –≤ —à–∞–±–ª–æ–Ω–µ {...|...|...} –±—É–¥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏.",
        reply_markup=cancel_mp,
    )


@router.message(F.text, AddPhoneBaseState.text)
@router.message(F.text, EditPhoneBaseState.text)
async def phone_base_text(message: Message, state: FSMContext, db: Database):
    matches = get_list_random_text(message.text)

    check_open = len(matches) == message.text.count("{")
    check_cancel = len(matches) == message.text.count("}")
    check_pipe = len(matches) <= message.text.count("|")

    if not check_open or not check_cancel or not check_pipe:
        text_template = "\n".join(matches)
        await message.answer(
            f"—Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É.\n\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n"
            f"{text_template}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=cancel_mp,
        )
        return

    current_state = await state.get_state()
    if current_state == EditPhoneBaseState.text:
        data = await state.get_data()
        name = data.get("name")
        await db.phone.update_text(
            user_id=message.from_user.id, name=name, text=message.text
        )
        await state.clear()
        await message.answer("–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω", reply_markup=start_mp)
        return

    await state.update_data(text=message.text)
    data = await state.get_data()
    name = data.get("name")
    text = data.get("text")

    await state.set_state(AddPhoneBaseState.end)

    await message.answer(
        (
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–π –±–∞–∑—ã:\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n{name}\n"
            f"<b>–¢–µ–∫—Å—Ç:</b>\n{text}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
        ),
        reply_markup=yes_no_mp,
        parse_mode="HTML",
    )


@router.callback_query(F.data == "yes", AddPhoneBaseState.end)
async def phone_base_yes(callback: Message, state: FSMContext, bot: Bot, db: Database):
    data = await state.get_data()
    name = data.get("name")
    text = data.get("text")
    file_id = data.get("file_id")

    file_text = await get_file_text(bot, file_id)

    await db.phone.new(
        user_id=callback.from_user.id,
        name=name,
        numbers=file_text,
        text=text,
    )

    await state.clear()
    await callback.answer()
    await callback.message.answer("–ë–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=start_mp)


@router.callback_query(F.data == "no", AddPhoneBaseState.end)
async def phone_base_yes(callback: Message, state: FSMContext):
    await state.clear()
    await callback.answer()
    await callback.message.answer("–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –±–∞–∑—ã", reply_markup=start_mp)


@router.callback_query(F.data == "phone_base_list")
async def phone_base_list(callback: Message, db: Database):
    await callback.answer()
    page = 0

    phones, has_more = await db.phone.get_pagination(
        user_id=callback.from_user.id, offset=page, limit=cfg.db.limit_phones
    )
    if len(phones) == 0:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –±–∞–∑ –ø—É—Å—Ç", reply_markup=start_mp)
        return

    name_list = [phone.name for phone in phones]

    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –±–∞–∑",
        reply_markup=await create_bookmarks_keyboard(name_list, page, has_more),
    )


@router.callback_query(F.data.startswith("next_page"))
async def next_page(callback: Message, db: Database):
    await callback.answer()
    page = int(callback.data.split("|")[1])

    phones, has_more = await db.phone.get_pagination(
        user_id=callback.from_user.id,
        offset=page * cfg.db.limit_phones,
        limit=cfg.db.limit_phones,
    )

    name_list = [phone.name for phone in phones]

    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –±–∞–∑",
        reply_markup=await create_bookmarks_keyboard(name_list, page, has_more),
    )


@router.callback_query(F.data.startswith("prev_page"))
async def prev_page(callback: Message, db: Database):
    await callback.answer()
    page = int(callback.data.split("|")[1])

    phones, has_more = await db.phone.get_pagination(
        user_id=callback.from_user.id,
        offset=page * cfg.db.limit_phones,
        limit=cfg.db.limit_phones,
    )

    name_list = [phone.name for phone in phones]

    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –±–∞–∑",
        reply_markup=await create_bookmarks_keyboard(name_list, page, has_more),
    )


@router.callback_query(F.data.startswith("phone_name"))
async def phone_name(callback: Message, db: Database):
    await callback.answer()
    name = callback.data.split("|")[1]
    phone = await db.phone.get(user_id=callback.from_user.id, name=name)
    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ:\n{phone.name}\n—Ç–µ–∫—Å—Ç:\n{phone.text}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    await callback.message.edit_text(text, reply_markup=await create_phone_mp(name))


@router.callback_query(F.data.startswith("phone_edit_text"))
async def phone_edit_text(callback: Message, state: FSMContext):
    await callback.answer()
    name = callback.data.split("|")[1]
    await state.set_state(EditPhoneBaseState.text)
    await state.update_data(name=name)

    await callback.message.delete()

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç. –§–æ—Ä–º–∞—Ç:\n{–î–æ–±—Ä—ã–π –¥–µ–Ω—å|–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ}!"
        " –í–∞–º –ø–∏—à–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è ¬´–°–∏—Å—Ç–µ–º—ã –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª\n\n"
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è {–ø—Ä–æ–¥–∞–∂–µ–π|—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π} –∏ {—É—Å—Ç–∞–Ω–æ–≤–∫–æ–π|–º–æ–Ω—Ç–∞–∂–æ–º}"
        " –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –∏ —á–∞—Å—Ç–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n\n"
        "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ª–∏ –≤–∞–º —É—Å–∏–ª–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –¥–æ–º–∞ –∏–ª–∏ –±–∏–∑–Ω–µ—Å–∞?\n\n"
        "–°–ª–æ–≤–∞ –≤ —à–∞–±–ª–æ–Ω–µ {...|...|...} –±—É–¥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏.",
        reply_markup=cancel_mp,
    )


@router.callback_query(F.data.startswith("phone_edit_file"))
async def phone_edit_file(callback: Message, state: FSMContext):
    await callback.answer()
    name = callback.data.split("|")[1]
    await state.set_state(EditPhoneBaseState.file)
    await state.update_data(name=name)

    await callback.message.delete()

    await callback.message.answer(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ csv —Ñ–æ—Ä–º–∞—Ç–µ —Å –±–∞–∑–æ–π –Ω–æ–º–µ—Ä–æ–≤", reply_markup=cancel_mp
    )


@router.callback_query(F.data.startswith("phone_get"))
async def phone_get(callback: Message, db: Database):
    await callback.answer()
    name = callback.data.split("|")[1]
    phone = await db.phone.get(user_id=callback.from_user.id, name=name)

    path_to_dir_user, path_to_file = await create_file_text(
        text=phone.numbers, name=name, user_id=callback.from_user.id
    )

    await callback.message.delete()

    await callback.message.answer_document(
        FSInputFile(path_to_file),
        reply_markup=start_mp,
    )

    shutil.rmtree(path_to_dir_user)


@router.callback_query(F.data.startswith("phone_link"))
async def phone_link(callback: Message, state: FSMContext):
    await callback.answer()
    name = callback.data.split("|")[1]

    await state.set_state(GetLinksState.quantity)
    await state.update_data(name=name)

    await callback.message.delete()

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å", reply_markup=cancel_mp
    )


@router.message(F.text, GetLinksState.quantity)
async def phone_link_quantity(message: Message, state: FSMContext, db: Database):
    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer(
            "–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0", reply_markup=cancel_mp
        )
        return

    if quantity <= 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0", reply_markup=cancel_mp)
        return

    data = await state.get_data()
    name = data.get("name")

    phone = await db.phone.get(user_id=message.from_user.id, name=name)

    text = await create_text_links(phone, quantity)

    split_chunks = split_text(text)

    await state.clear()
    for chunk in split_chunks:
        await message.answer(
            chunk, reply_markup=start_mp, disable_web_page_preview=True, parse_mode="HTML"
        )
